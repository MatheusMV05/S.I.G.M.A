<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/sigma/src/main/java/com/project/sigma/controller/ProdutoController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sigma/src/main/java/com/project/sigma/controller/ProdutoController.java" />
              <option name="originalContent" value="package com.project.sigma.controller;&#10;&#10;import com.project.sigma.dto.PaginatedResponseDTO;&#10;import com.project.sigma.dto.ProdutoRequestDTO;&#10;import com.project.sigma.dto.ProdutoResponseDTO;&#10;import com.project.sigma.model.Produto;&#10;import com.project.sigma.service.ProdutoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/products&quot;)&#10;public class ProdutoController {&#10;&#10;    @Autowired&#10;    private ProdutoService produtoService;&#10;&#10;    @GetMapping&#10;    public PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; listarProdutos(&#10;        @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;        @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;        @RequestParam(required = false) String search,&#10;        @RequestParam(required = false) Integer categoryId,&#10;        @RequestParam(required = false) String status&#10;    ) {&#10;        System.out.println(&quot; GET /api/products - Listando produtos com paginação&quot;);&#10;        System.out.println(&quot;    Parâmetros: page=&quot; + page + &quot;, size=&quot; + size + &quot;, search=&quot; + search + &quot;, categoryId=&quot; + categoryId + &quot;, status=&quot; + status);&#10;&#10;        PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; response = produtoService.buscarProdutosComPaginacao(page, size, search, categoryId, status);&#10;&#10;        System.out.println(&quot; Retornando &quot; + response.getContent().size() + &quot; produtos de &quot; + response.getTotalElements() + &quot; total&quot;);&#10;        return response;&#10;    }&#10;&#10;    // Add endpoint for low stock products that frontend is calling&#10;    @GetMapping(&quot;/low-stock&quot;)&#10;    public ResponseEntity&lt;?&gt; getLowStockProducts() {&#10;        System.out.println(&quot;⚠️ GET /api/products/low-stock - Buscando produtos com baixo estoque&quot;);&#10;&#10;        try {&#10;            // For now, return empty array but with proper logging&#10;            System.out.println(&quot;✅ Retornando lista vazia de produtos com baixo estoque (implementação futura)&quot;);&#10;            return ResponseEntity.ok(new Object[0]);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erro ao buscar produtos com baixo estoque: &quot; + e.getMessage());&#10;            return ResponseEntity.ok(new Object[0]);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProdutoResponseDTO&gt; getProdutoById(@PathVariable Integer id) {&#10;        ProdutoResponseDTO produto = produtoService.buscarProdutoCompletoPorId(id);&#10;        return produto != null ? ResponseEntity.ok(produto) : ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Produto&gt; criarProduto(@RequestBody Produto produto) {&#10;        Produto novoProduto = produtoService.criarProduto(produto);&#10;        return new ResponseEntity&lt;&gt;(novoProduto, HttpStatus.CREATED);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Produto&gt; atualizarProduto(@PathVariable Integer id, @RequestBody ProdutoRequestDTO dto) {&#10;        System.out.println(&quot;=== DEBUG PRODUTO UPDATE ===&quot;);&#10;        System.out.println(&quot;ID recebido: &quot; + id);&#10;        System.out.println(&quot;DTO recebido do frontend:&quot;);&#10;        dto.debugPrint();&#10;&#10;        // Converter DTO para entidade Produto&#10;        Produto produto = new Produto();&#10;        produto.setIdProduto(id);&#10;        produto.setNome(dto.getNome());&#10;        produto.setMarca(dto.getMarca());&#10;        produto.setQuantEmEstoque(dto.getQuantEmEstoque());&#10;        produto.setValorUnitario(dto.getValorUnitario());&#10;        produto.setDataValidade(dto.getDataValidade());&#10;        produto.setIdCategoria(dto.getIdCategoria());&#10;        produto.setDescricao(dto.getDescricao());&#10;        produto.setEstoqueMinimo(dto.getEstoqueMinimo());&#10;        produto.setEstoqueMaximo(dto.getEstoqueMaximo());&#10;        produto.setPrecoCusto(dto.getPrecoCusto());&#10;        produto.setStatus(dto.getStatus());&#10;        produto.setCodigoBarras(dto.getCodigoBarras());&#10;        produto.setUnidade(dto.getUnidade());&#10;        produto.setPeso(dto.getPeso());&#10;&#10;        System.out.println(&quot;Produto antes de enviar para service:&quot;);&#10;        System.out.println(&quot;valor_unitario: &quot; + produto.getValorUnitario());&#10;        System.out.println(&quot;quant_em_estoque: &quot; + produto.getQuantEmEstoque());&#10;        System.out.println(&quot;===============================&quot;);&#10;&#10;        Produto produtoAtualizado = produtoService.atualizarProduto(produto);&#10;        return ResponseEntity.ok(produtoAtualizado);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletarProduto(@PathVariable Integer id) {&#10;        produtoService.deletarProduto(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.project.sigma.controller;&#10;&#10;import com.project.sigma.dto.PaginatedResponseDTO;&#10;import com.project.sigma.dto.ProdutoRequestDTO;&#10;import com.project.sigma.dto.ProdutoResponseDTO;&#10;import com.project.sigma.model.Produto;&#10;import com.project.sigma.service.ProdutoService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/products&quot;)&#10;public class ProdutoController {&#10;&#10;    @Autowired&#10;    private ProdutoService produtoService;&#10;&#10;    @GetMapping&#10;    public PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; listarProdutos(&#10;        @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;        @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;        @RequestParam(required = false) String search,&#10;        @RequestParam(required = false) Integer categoryId,&#10;        @RequestParam(required = false) String status&#10;    ) {&#10;        System.out.println(&quot; GET /api/products - Listando produtos com paginação&quot;);&#10;        System.out.println(&quot;    Parâmetros: page=&quot; + page + &quot;, size=&quot; + size + &quot;, search=&quot; + search + &quot;, categoryId=&quot; + categoryId + &quot;, status=&quot; + status);&#10;&#10;        PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; response = produtoService.buscarProdutosComPaginacao(page, size, search, categoryId, status);&#10;&#10;        System.out.println(&quot; Retornando &quot; + response.getContent().size() + &quot; produtos de &quot; + response.getTotalElements() + &quot; total&quot;);&#10;        return response;&#10;    }&#10;&#10;    // Add endpoint for low stock products that frontend is calling&#10;    @GetMapping(&quot;/low-stock&quot;)&#10;    public ResponseEntity&lt;?&gt; getLowStockProducts() {&#10;        System.out.println(&quot;⚠️ GET /api/products/low-stock - Buscando produtos com baixo estoque&quot;);&#10;&#10;        try {&#10;            // For now, return empty array but with proper logging&#10;            System.out.println(&quot;✅ Retornando lista vazia de produtos com baixo estoque (implementação futura)&quot;);&#10;            return ResponseEntity.ok(new Object[0]);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erro ao buscar produtos com baixo estoque: &quot; + e.getMessage());&#10;            return ResponseEntity.ok(new Object[0]);&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;ProdutoResponseDTO&gt; getProdutoById(@PathVariable Integer id) {&#10;        ProdutoResponseDTO produto = produtoService.buscarProdutoCompletoPorId(id);&#10;        return produto != null ? ResponseEntity.ok(produto) : ResponseEntity.notFound().build();&#10;    }&#10;&#10;    @PostMapping&#10;    public ResponseEntity&lt;Produto&gt; criarProduto(@RequestBody ProdutoRequestDTO dto) {&#10;        System.out.println(&quot;=== DEBUG PRODUTO CREATE ===&quot;);&#10;        System.out.println(&quot;DTO recebido do frontend para CRIAR:&quot;);&#10;        dto.debugPrint();&#10;        &#10;        // Verificar se os campos obrigatórios estão presentes&#10;        System.out.println(&quot;=== VALIDAÇÃO DOS CAMPOS ===&quot;);&#10;        System.out.println(&quot;Nome: &quot; + (dto.getNome() != null ? &quot;✅ &quot; + dto.getNome() : &quot;❌ NULL&quot;));&#10;        System.out.println(&quot;Valor Unitário: &quot; + (dto.getValorUnitario() != null ? &quot;✅ &quot; + dto.getValorUnitario() : &quot;❌ NULL&quot;));&#10;        System.out.println(&quot;Quantidade: &quot; + (dto.getQuantEmEstoque() != null ? &quot;✅ &quot; + dto.getQuantEmEstoque() : &quot;❌ NULL&quot;));&#10;        System.out.println(&quot;Preço Custo: &quot; + (dto.getPrecoCusto() != null ? &quot;✅ &quot; + dto.getPrecoCusto() : &quot;❌ NULL&quot;));&#10;        System.out.println(&quot;Status: &quot; + (dto.getStatus() != null ? &quot;✅ &quot; + dto.getStatus() : &quot;❌ NULL&quot;));&#10;        System.out.println(&quot;============================&quot;);&#10;&#10;        // Converter DTO para entidade Produto&#10;        Produto produto = new Produto();&#10;        produto.setNome(dto.getNome());&#10;        produto.setMarca(dto.getMarca());&#10;        produto.setQuantEmEstoque(dto.getQuantEmEstoque());&#10;        produto.setValorUnitario(dto.getValorUnitario());&#10;        produto.setDataValidade(dto.getDataValidade());&#10;        produto.setIdCategoria(dto.getIdCategoria());&#10;        produto.setDescricao(dto.getDescricao());&#10;        produto.setEstoqueMinimo(dto.getEstoqueMinimo());&#10;        produto.setEstoqueMaximo(dto.getEstoqueMaximo());&#10;        produto.setPrecoCusto(dto.getPrecoCusto());&#10;        produto.setStatus(dto.getStatus());&#10;        produto.setCodigoBarras(dto.getCodigoBarras());&#10;        produto.setUnidade(dto.getUnidade());&#10;        produto.setPeso(dto.getPeso());&#10;&#10;        System.out.println(&quot;Produto convertido antes de enviar para service:&quot;);&#10;        System.out.println(&quot;valor_unitario: &quot; + produto.getValorUnitario());&#10;        System.out.println(&quot;quant_em_estoque: &quot; + produto.getQuantEmEstoque());&#10;        System.out.println(&quot;preco_custo: &quot; + produto.getPrecoCusto());&#10;        System.out.println(&quot;status: &quot; + produto.getStatus());&#10;        System.out.println(&quot;===============================&quot;);&#10;&#10;        Produto novoProduto = produtoService.criarProduto(produto);&#10;        System.out.println(&quot;✅ Produto criado com sucesso - ID: &quot; + novoProduto.getIdProduto());&#10;        return new ResponseEntity&lt;&gt;(novoProduto, HttpStatus.CREATED);&#10;    }&#10;&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Produto&gt; atualizarProduto(@PathVariable Integer id, @RequestBody ProdutoRequestDTO dto) {&#10;        System.out.println(&quot;=== DEBUG PRODUTO UPDATE ===&quot;);&#10;        System.out.println(&quot;ID recebido: &quot; + id);&#10;        System.out.println(&quot;DTO recebido do frontend:&quot;);&#10;        dto.debugPrint();&#10;&#10;        // Converter DTO para entidade Produto&#10;        Produto produto = new Produto();&#10;        produto.setIdProduto(id);&#10;        produto.setNome(dto.getNome());&#10;        produto.setMarca(dto.getMarca());&#10;        produto.setQuantEmEstoque(dto.getQuantEmEstoque());&#10;        produto.setValorUnitario(dto.getValorUnitario());&#10;        produto.setDataValidade(dto.getDataValidade());&#10;        produto.setIdCategoria(dto.getIdCategoria());&#10;        produto.setDescricao(dto.getDescricao());&#10;        produto.setEstoqueMinimo(dto.getEstoqueMinimo());&#10;        produto.setEstoqueMaximo(dto.getEstoqueMaximo());&#10;        produto.setPrecoCusto(dto.getPrecoCusto());&#10;        produto.setStatus(dto.getStatus());&#10;        produto.setCodigoBarras(dto.getCodigoBarras());&#10;        produto.setUnidade(dto.getUnidade());&#10;        produto.setPeso(dto.getPeso());&#10;&#10;        System.out.println(&quot;Produto antes de enviar para service:&quot;);&#10;        System.out.println(&quot;valor_unitario: &quot; + produto.getValorUnitario());&#10;        System.out.println(&quot;quant_em_estoque: &quot; + produto.getQuantEmEstoque());&#10;        System.out.println(&quot;===============================&quot;);&#10;&#10;        Produto produtoAtualizado = produtoService.atualizarProduto(produto);&#10;        return ResponseEntity.ok(produtoAtualizado);&#10;    }&#10;&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;Void&gt; deletarProduto(@PathVariable Integer id) {&#10;        produtoService.deletarProduto(id);&#10;        return ResponseEntity.noContent().build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/sigma/src/main/java/com/project/sigma/repository/ProdutoRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sigma/src/main/java/com/project/sigma/repository/ProdutoRepository.java" />
              <option name="originalContent" value="package com.project.sigma.repository;&#10;&#10;import com.project.sigma.dto.PaginatedResponseDTO;&#10;import com.project.sigma.dto.ProdutoResponseDTO;&#10;import com.project.sigma.model.Produto;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#10;import org.springframework.jdbc.core.RowMapper;&#10;import org.springframework.jdbc.support.GeneratedKeyHolder;&#10;import org.springframework.jdbc.support.KeyHolder;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.sql.PreparedStatement;&#10;import java.sql.ResultSet;&#10;import java.sql.Statement;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;@Repository&#10;public class ProdutoRepository {&#10;&#10;    @Autowired&#10;    private JdbcTemplate jdbcTemplate;&#10;&#10;    private static final String COLUNAS_PRODUTO =&#10;        &quot;p.id_produto, p.nome, p.marca, p.quant_em_estoque, p.valor_unitario, &quot; +&#10;        &quot;p.data_validade, p.id_categoria, p.descricao, p.estoque_minimo, p.estoque_maximo, &quot; +&#10;        &quot;p.preco_custo, p.status, p.codigo_barras, p.unidade, p.peso, &quot; +&#10;        &quot;p.data_criacao, p.data_atualizacao, &quot; +&#10;        &quot;c.id_categoria as categoria_id, c.nome as categoria_nome&quot;;&#10;&#10;    private final RowMapper&lt;ProdutoResponseDTO&gt; produtoResponseMapper = (ResultSet rs, int rowNum) -&gt; {&#10;        ProdutoResponseDTO dto = new ProdutoResponseDTO();&#10;&#10;        // Campos básicos&#10;        dto.setId_produto(rs.getInt(&quot;id_produto&quot;));&#10;        dto.setNome(rs.getString(&quot;nome&quot;));&#10;        dto.setMarca(rs.getString(&quot;marca&quot;));&#10;        dto.setDescricao(rs.getString(&quot;descricao&quot;));&#10;&#10;        // Mapeamento de nomes&#10;        dto.setEstoque(rs.getInt(&quot;quant_em_estoque&quot;));&#10;        dto.setPreco_venda(rs.getBigDecimal(&quot;valor_unitario&quot;));&#10;        dto.setEstoque_minimo(rs.getInt(&quot;estoque_minimo&quot;));&#10;        dto.setEstoque_maximo(rs.getInt(&quot;estoque_maximo&quot;));&#10;&#10;        // Novos campos&#10;        dto.setPreco_custo(rs.getBigDecimal(&quot;preco_custo&quot;));&#10;        dto.setStatus(rs.getString(&quot;status&quot;));&#10;        dto.setCodigo_barras(rs.getString(&quot;codigo_barras&quot;));&#10;        dto.setUnidade(rs.getString(&quot;unidade&quot;));&#10;        dto.setPeso(rs.getDouble(&quot;peso&quot;));&#10;&#10;        // Datas&#10;        if (rs.getDate(&quot;data_validade&quot;) != null) {&#10;            dto.setData_validade(rs.getDate(&quot;data_validade&quot;).toLocalDate());&#10;        }&#10;&#10;        if (rs.getTimestamp(&quot;data_criacao&quot;) != null) {&#10;            dto.setData_criacao(rs.getTimestamp(&quot;data_criacao&quot;).toLocalDateTime().toString());&#10;        }&#10;&#10;        if (rs.getTimestamp(&quot;data_atualizacao&quot;) != null) {&#10;            dto.setData_atualizacao(rs.getTimestamp(&quot;data_atualizacao&quot;).toLocalDateTime().toString());&#10;        }&#10;&#10;        // Categoria aninhada&#10;        if (rs.getInt(&quot;categoria_id&quot;) &gt; 0) {&#10;            ProdutoResponseDTO.CategoriaSimpleDTO categoria = new ProdutoResponseDTO.CategoriaSimpleDTO();&#10;            categoria.setId(rs.getInt(&quot;categoria_id&quot;));&#10;            categoria.setNome(rs.getString(&quot;categoria_nome&quot;));&#10;            dto.setCategory(categoria);&#10;        }&#10;&#10;        return dto;&#10;    };&#10;&#10;    public PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; findAllWithPagination(&#10;        int page, int size, String search, Integer categoryId, String status) {&#10;&#10;        System.out.println(&quot; Buscando produtos - page: &quot; + page + &quot;, size: &quot; + size + &quot;, search: &quot; + search + &quot;, categoryId: &quot; + categoryId + &quot;, status: &quot; + status);&#10;&#10;        StringBuilder sql = new StringBuilder();&#10;        sql.append(&quot;SELECT &quot;).append(COLUNAS_PRODUTO)&#10;           .append(&quot; FROM Produto p &quot;)&#10;           .append(&quot;LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria &quot;)&#10;           .append(&quot;WHERE 1=1 &quot;);&#10;&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#10;&#10;        // Filtros dinâmicos&#10;        if (search != null &amp;&amp; !search.trim().isEmpty()) {&#10;            sql.append(&quot;AND (p.nome LIKE ? OR p.marca LIKE ? OR p.codigo_barras LIKE ?) &quot;);&#10;            String searchPattern = &quot;%&quot; + search + &quot;%&quot;;&#10;            params.add(searchPattern);&#10;            params.add(searchPattern);&#10;            params.add(searchPattern);&#10;        }&#10;&#10;        if (categoryId != null) {&#10;            sql.append(&quot;AND p.id_categoria = ? &quot;);&#10;            params.add(categoryId);&#10;        }&#10;&#10;        if (status != null &amp;&amp; !status.equals(&quot;all&quot;)) {&#10;            sql.append(&quot;AND p.status = ? &quot;);&#10;            params.add(status);&#10;        }&#10;&#10;        System.out.println(&quot; SQL de contagem: &quot; + sql.toString());&#10;&#10;        // Contagem total&#10;        String countSql = &quot;SELECT COUNT(*) FROM (&quot; + sql.toString() + &quot;) as countQuery&quot;;&#10;        Long total;&#10;        try {&#10;            total = jdbcTemplate.queryForObject(countSql, params.toArray(), Long.class);&#10;            System.out.println(&quot; Total de produtos encontrados: &quot; + total);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erro na contagem: &quot; + e.getMessage());&#10;            total = 0L;&#10;        }&#10;&#10;        // Paginação&#10;        sql.append(&quot;ORDER BY p.nome LIMIT ? OFFSET ?&quot;);&#10;        params.add(size);&#10;        params.add(page * size);&#10;&#10;        System.out.println(&quot; SQL final: &quot; + sql.toString());&#10;        System.out.println(&quot; Parâmetros: &quot; + params);&#10;&#10;        // Busca dados&#10;        List&lt;ProdutoResponseDTO&gt; content;&#10;        try {&#10;            content = jdbcTemplate.query(sql.toString(), params.toArray(), produtoResponseMapper);&#10;            System.out.println(&quot;✅ Produtos recuperados: &quot; + content.size());&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ Erro ao buscar produtos: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            content = new ArrayList&lt;&gt;();&#10;        }&#10;&#10;        // Monta resposta paginada&#10;        PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; response = new PaginatedResponseDTO&lt;&gt;();&#10;        response.setContent(content);&#10;        response.setPage(page);&#10;        response.setSize(size);&#10;        response.setTotalElements(total);&#10;        response.setTotalPages((int) Math.ceil((double) total / size));&#10;        response.setFirst(page == 0);&#10;        response.setLast(page &gt;= response.getTotalPages() - 1);&#10;        response.setNumber(page);&#10;&#10;        System.out.println(&quot; Resposta final: &quot; + content.size() + &quot; produtos de &quot; + total + &quot; total&quot;);&#10;&#10;        return response;&#10;    }&#10;&#10;    public ProdutoResponseDTO findByIdComplete(Integer id) {&#10;        String sql = &quot;SELECT &quot; + COLUNAS_PRODUTO +&#10;                    &quot; FROM Produto p &quot; +&#10;                    &quot;LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria &quot; +&#10;                    &quot;WHERE p.id_produto = ?&quot;;&#10;&#10;        List&lt;ProdutoResponseDTO&gt; result = jdbcTemplate.query(sql, produtoResponseMapper, id);&#10;        return result.isEmpty() ? null : result.get(0);&#10;    }&#10;&#10;    @Transactional&#10;    public Produto save(Produto produto) {&#10;        if (produto.getIdProduto() == null) {&#10;            // Inserir - definir valores padrão&#10;            if (produto.getDataCriacao() == null) {&#10;                produto.setDataCriacao(LocalDateTime.now());&#10;            }&#10;            if (produto.getStatus() == null) {&#10;                produto.setStatus(&quot;ATIVO&quot;);&#10;            }&#10;            produto.setDataAtualizacao(LocalDateTime.now());&#10;&#10;            String sql = &quot;&quot;&quot;&#10;                INSERT INTO Produto (nome, marca, quant_em_estoque, valor_unitario, data_validade, &#10;                                   id_categoria, descricao, estoque_minimo, estoque_maximo,&#10;                                   preco_custo, status, codigo_barras, unidade, peso, &#10;                                   data_criacao, data_atualizacao)&#10;                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#10;            &quot;&quot;&quot;;&#10;&#10;            KeyHolder keyHolder = new GeneratedKeyHolder();&#10;&#10;            jdbcTemplate.update(connection -&gt; {&#10;                PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#10;                ps.setString(1, produto.getNome());&#10;                ps.setString(2, produto.getMarca());&#10;                ps.setInt(3, produto.getQuantEmEstoque());&#10;                ps.setBigDecimal(4, produto.getValorUnitario());&#10;                ps.setDate(5, produto.getDataValidade() != null ? java.sql.Date.valueOf(produto.getDataValidade()) : null);&#10;                ps.setInt(6, produto.getIdCategoria());&#10;                ps.setString(7, produto.getDescricao());&#10;                ps.setInt(8, produto.getEstoqueMinimo());&#10;                ps.setInt(9, produto.getEstoqueMaximo());&#10;                ps.setBigDecimal(10, produto.getPrecoCusto());&#10;                ps.setString(11, produto.getStatus());&#10;                ps.setString(12, produto.getCodigoBarras());&#10;                ps.setString(13, produto.getUnidade());&#10;                ps.setDouble(14, produto.getPeso());&#10;                ps.setTimestamp(15, java.sql.Timestamp.valueOf(produto.getDataCriacao()));&#10;                ps.setTimestamp(16, java.sql.Timestamp.valueOf(produto.getDataAtualizacao()));&#10;                return ps;&#10;            }, keyHolder);&#10;&#10;            produto.setIdProduto(Objects.requireNonNull(keyHolder.getKey()).intValue());&#10;        } else {&#10;            // Atualizar&#10;            System.out.println(&quot;=== DEBUG REPOSITORY UPDATE ===&quot;);&#10;            System.out.println(&quot;Produto ID: &quot; + produto.getIdProduto());&#10;            System.out.println(&quot;valor_unitario no repository: &quot; + produto.getValorUnitario());&#10;            System.out.println(&quot;quant_em_estoque no repository: &quot; + produto.getQuantEmEstoque());&#10;            System.out.println(&quot;id_categoria no repository: &quot; + produto.getIdCategoria());&#10;            System.out.println(&quot;preco_custo no repository: &quot; + produto.getPrecoCusto());&#10;            System.out.println(&quot;status no repository: &quot; + produto.getStatus());&#10;&#10;            produto.setDataAtualizacao(LocalDateTime.now());&#10;&#10;            String sql = &quot;&quot;&quot;&#10;                UPDATE Produto SET nome = ?, marca = ?, quant_em_estoque = ?, valor_unitario = ?, &#10;                                 data_validade = ?, id_categoria = ?, descricao = ?, &#10;                                 estoque_minimo = ?, estoque_maximo = ?, preco_custo = ?,&#10;                                 status = ?, codigo_barras = ?, unidade = ?, peso = ?,&#10;                                 data_atualizacao = ?&#10;                WHERE id_produto = ?&#10;            &quot;&quot;&quot;;&#10;&#10;            System.out.println(&quot;SQL a ser executado: &quot; + sql);&#10;            System.out.println(&quot;Parâmetros do SQL:&quot;);&#10;            System.out.println(&quot;1. nome: &quot; + produto.getNome());&#10;            System.out.println(&quot;2. marca: &quot; + produto.getMarca());&#10;            System.out.println(&quot;3. quant_em_estoque: &quot; + produto.getQuantEmEstoque());&#10;            System.out.println(&quot;4. valor_unitario: &quot; + produto.getValorUnitario());&#10;            System.out.println(&quot;5. data_validade: &quot; + produto.getDataValidade());&#10;            System.out.println(&quot;6. id_categoria: &quot; + produto.getIdCategoria());&#10;            System.out.println(&quot;7. descricao: &quot; + produto.getDescricao());&#10;            System.out.println(&quot;8. estoque_minimo: &quot; + produto.getEstoqueMinimo());&#10;            System.out.println(&quot;9. estoque_maximo: &quot; + produto.getEstoqueMaximo());&#10;            System.out.println(&quot;10. preco_custo: &quot; + produto.getPrecoCusto());&#10;            System.out.println(&quot;11. status: &quot; + produto.getStatus());&#10;            System.out.println(&quot;12. codigo_barras: &quot; + produto.getCodigoBarras());&#10;            System.out.println(&quot;13. unidade: &quot; + produto.getUnidade());&#10;            System.out.println(&quot;14. peso: &quot; + produto.getPeso());&#10;            System.out.println(&quot;15. data_atualizacao: &quot; + produto.getDataAtualizacao());&#10;            System.out.println(&quot;16. id_produto (WHERE): &quot; + produto.getIdProduto());&#10;            System.out.println(&quot;================================&quot;);&#10;&#10;            jdbcTemplate.update(sql,&#10;                produto.getNome(), produto.getMarca(), produto.getQuantEmEstoque(),&#10;                produto.getValorUnitario(), produto.getDataValidade(), produto.getIdCategoria(),&#10;                produto.getDescricao(), produto.getEstoqueMinimo(), produto.getEstoqueMaximo(),&#10;                produto.getPrecoCusto(), produto.getStatus(), produto.getCodigoBarras(),&#10;                produto.getUnidade(), produto.getPeso(), produto.getDataAtualizacao(),&#10;                produto.getIdProduto()&#10;            );&#10;&#10;            System.out.println(&quot;✅ UPDATE executado com sucesso!&quot;);&#10;        }&#10;        return produto;&#10;    }&#10;&#10;    @Transactional&#10;    public void deleteById(Integer id) {&#10;        String sql = &quot;DELETE FROM Produto WHERE id_produto = ?&quot;;&#10;        jdbcTemplate.update(sql, id);&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.project.sigma.repository;&#13;&#10;&#13;&#10;import com.project.sigma.dto.PaginatedResponseDTO;&#13;&#10;import com.project.sigma.dto.ProdutoResponseDTO;&#13;&#10;import com.project.sigma.model.Produto;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.jdbc.core.JdbcTemplate;&#13;&#10;import org.springframework.jdbc.core.RowMapper;&#13;&#10;import org.springframework.jdbc.support.GeneratedKeyHolder;&#13;&#10;import org.springframework.jdbc.support.KeyHolder;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;import org.springframework.transaction.annotation.Transactional;&#13;&#10;&#13;&#10;import java.sql.PreparedStatement;&#13;&#10;import java.sql.ResultSet;&#13;&#10;import java.sql.Statement;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Objects;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public class ProdutoRepository {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private JdbcTemplate jdbcTemplate;&#13;&#10;&#13;&#10;    private static final String COLUNAS_PRODUTO =&#13;&#10;        &quot;p.id_produto, p.nome, p.marca, p.quant_em_estoque, p.valor_unitario, &quot; +&#13;&#10;        &quot;p.data_validade, p.id_categoria, p.descricao, p.estoque_minimo, p.estoque_maximo, &quot; +&#13;&#10;        &quot;p.preco_custo, p.status, p.codigo_barras, p.unidade, p.peso, &quot; +&#13;&#10;        &quot;p.data_criacao, p.data_atualizacao, &quot; +&#13;&#10;        &quot;c.id_categoria as categoria_id, c.nome as categoria_nome&quot;;&#13;&#10;&#13;&#10;    private final RowMapper&lt;ProdutoResponseDTO&gt; produtoResponseMapper = (ResultSet rs, int rowNum) -&gt; {&#13;&#10;        ProdutoResponseDTO dto = new ProdutoResponseDTO();&#13;&#10;&#13;&#10;        // Campos básicos&#13;&#10;        dto.setId_produto(rs.getInt(&quot;id_produto&quot;));&#13;&#10;        dto.setNome(rs.getString(&quot;nome&quot;));&#13;&#10;        dto.setMarca(rs.getString(&quot;marca&quot;));&#13;&#10;        dto.setDescricao(rs.getString(&quot;descricao&quot;));&#13;&#10;&#13;&#10;        // Mapeamento de nomes&#13;&#10;        dto.setEstoque(rs.getInt(&quot;quant_em_estoque&quot;));&#13;&#10;        dto.setPreco_venda(rs.getBigDecimal(&quot;valor_unitario&quot;));&#13;&#10;        dto.setEstoque_minimo(rs.getInt(&quot;estoque_minimo&quot;));&#13;&#10;        dto.setEstoque_maximo(rs.getInt(&quot;estoque_maximo&quot;));&#13;&#10;&#13;&#10;        // Novos campos&#13;&#10;        dto.setPreco_custo(rs.getBigDecimal(&quot;preco_custo&quot;));&#13;&#10;        dto.setStatus(rs.getString(&quot;status&quot;));&#13;&#10;        dto.setCodigo_barras(rs.getString(&quot;codigo_barras&quot;));&#13;&#10;        dto.setUnidade(rs.getString(&quot;unidade&quot;));&#13;&#10;        dto.setPeso(rs.getDouble(&quot;peso&quot;));&#13;&#10;&#13;&#10;        // Datas&#13;&#10;        if (rs.getDate(&quot;data_validade&quot;) != null) {&#13;&#10;            dto.setData_validade(rs.getDate(&quot;data_validade&quot;).toLocalDate());&#13;&#10;        }&#13;&#10;&#13;&#10;        if (rs.getTimestamp(&quot;data_criacao&quot;) != null) {&#13;&#10;            dto.setData_criacao(rs.getTimestamp(&quot;data_criacao&quot;).toLocalDateTime().toString());&#13;&#10;        }&#13;&#10;&#13;&#10;        if (rs.getTimestamp(&quot;data_atualizacao&quot;) != null) {&#13;&#10;            dto.setData_atualizacao(rs.getTimestamp(&quot;data_atualizacao&quot;).toLocalDateTime().toString());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Categoria aninhada&#13;&#10;        if (rs.getInt(&quot;categoria_id&quot;) &gt; 0) {&#13;&#10;            ProdutoResponseDTO.CategoriaSimpleDTO categoria = new ProdutoResponseDTO.CategoriaSimpleDTO();&#13;&#10;            categoria.setId(rs.getInt(&quot;categoria_id&quot;));&#13;&#10;            categoria.setNome(rs.getString(&quot;categoria_nome&quot;));&#13;&#10;            dto.setCategory(categoria);&#13;&#10;        }&#13;&#10;&#13;&#10;        return dto;&#13;&#10;    };&#13;&#10;&#13;&#10;    public PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; findAllWithPagination(&#13;&#10;        int page, int size, String search, Integer categoryId, String status) {&#13;&#10;&#13;&#10;        System.out.println(&quot; Buscando produtos - page: &quot; + page + &quot;, size: &quot; + size + &quot;, search: &quot; + search + &quot;, categoryId: &quot; + categoryId + &quot;, status: &quot; + status);&#13;&#10;&#13;&#10;        StringBuilder sql = new StringBuilder();&#13;&#10;        sql.append(&quot;SELECT &quot;).append(COLUNAS_PRODUTO)&#13;&#10;           .append(&quot; FROM Produto p &quot;)&#13;&#10;           .append(&quot;LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria &quot;)&#13;&#10;           .append(&quot;WHERE 1=1 &quot;);&#13;&#10;&#13;&#10;        List&lt;Object&gt; params = new ArrayList&lt;&gt;();&#13;&#10;&#13;&#10;        // Filtros dinâmicos&#13;&#10;        if (search != null &amp;&amp; !search.trim().isEmpty()) {&#13;&#10;            sql.append(&quot;AND (p.nome LIKE ? OR p.marca LIKE ? OR p.codigo_barras LIKE ?) &quot;);&#13;&#10;            String searchPattern = &quot;%&quot; + search + &quot;%&quot;;&#13;&#10;            params.add(searchPattern);&#13;&#10;            params.add(searchPattern);&#13;&#10;            params.add(searchPattern);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (categoryId != null) {&#13;&#10;            sql.append(&quot;AND p.id_categoria = ? &quot;);&#13;&#10;            params.add(categoryId);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (status != null &amp;&amp; !status.equals(&quot;all&quot;)) {&#13;&#10;            sql.append(&quot;AND p.status = ? &quot;);&#13;&#10;            params.add(status);&#13;&#10;        }&#13;&#10;&#13;&#10;        System.out.println(&quot; SQL de contagem: &quot; + sql.toString());&#13;&#10;&#13;&#10;        // Contagem total&#13;&#10;        String countSql = &quot;SELECT COUNT(*) FROM (&quot; + sql.toString() + &quot;) as countQuery&quot;;&#13;&#10;        Long total;&#13;&#10;        try {&#13;&#10;            total = jdbcTemplate.queryForObject(countSql, params.toArray(), Long.class);&#13;&#10;            System.out.println(&quot; Total de produtos encontrados: &quot; + total);&#13;&#10;        } catch (Exception e) {&#13;&#10;            System.err.println(&quot;❌ Erro na contagem: &quot; + e.getMessage());&#13;&#10;            total = 0L;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Paginação&#13;&#10;        sql.append(&quot;ORDER BY p.nome LIMIT ? OFFSET ?&quot;);&#13;&#10;        params.add(size);&#13;&#10;        params.add(page * size);&#13;&#10;&#13;&#10;        System.out.println(&quot; SQL final: &quot; + sql.toString());&#13;&#10;        System.out.println(&quot; Parâmetros: &quot; + params);&#13;&#10;&#13;&#10;        // Busca dados&#13;&#10;        List&lt;ProdutoResponseDTO&gt; content;&#13;&#10;        try {&#13;&#10;            content = jdbcTemplate.query(sql.toString(), params.toArray(), produtoResponseMapper);&#13;&#10;            System.out.println(&quot;✅ Produtos recuperados: &quot; + content.size());&#13;&#10;        } catch (Exception e) {&#13;&#10;            System.err.println(&quot;❌ Erro ao buscar produtos: &quot; + e.getMessage());&#13;&#10;            e.printStackTrace();&#13;&#10;            content = new ArrayList&lt;&gt;();&#13;&#10;        }&#13;&#10;&#13;&#10;        // Monta resposta paginada&#13;&#10;        PaginatedResponseDTO&lt;ProdutoResponseDTO&gt; response = new PaginatedResponseDTO&lt;&gt;();&#13;&#10;        response.setContent(content);&#13;&#10;        response.setPage(page);&#13;&#10;        response.setSize(size);&#13;&#10;        response.setTotalElements(total);&#13;&#10;        response.setTotalPages((int) Math.ceil((double) total / size));&#13;&#10;        response.setFirst(page == 0);&#13;&#10;        response.setLast(page &gt;= response.getTotalPages() - 1);&#13;&#10;        response.setNumber(page);&#13;&#10;&#13;&#10;        System.out.println(&quot; Resposta final: &quot; + content.size() + &quot; produtos de &quot; + total + &quot; total&quot;);&#13;&#10;&#13;&#10;        return response;&#13;&#10;    }&#13;&#10;&#13;&#10;    public ProdutoResponseDTO findByIdComplete(Integer id) {&#13;&#10;        String sql = &quot;SELECT &quot; + COLUNAS_PRODUTO +&#13;&#10;                    &quot; FROM Produto p &quot; +&#13;&#10;                    &quot;LEFT JOIN Categoria c ON p.id_categoria = c.id_categoria &quot; +&#13;&#10;                    &quot;WHERE p.id_produto = ?&quot;;&#13;&#10;&#13;&#10;        List&lt;ProdutoResponseDTO&gt; result = jdbcTemplate.query(sql, produtoResponseMapper, id);&#13;&#10;        return result.isEmpty() ? null : result.get(0);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional&#13;&#10;    public Produto save(Produto produto) {&#13;&#10;        if (produto.getIdProduto() == null) {&#13;&#10;            // Inserir - definir valores padrão&#13;&#10;            if (produto.getDataCriacao() == null) {&#13;&#10;                produto.setDataCriacao(LocalDateTime.now());&#13;&#10;            }&#13;&#10;            if (produto.getStatus() == null) {&#13;&#10;                produto.setStatus(&quot;ATIVO&quot;);&#13;&#10;            }&#13;&#10;            produto.setDataAtualizacao(LocalDateTime.now());&#13;&#10;&#13;&#10;            String sql = &quot;&quot;&quot;&#13;&#10;                INSERT INTO Produto (nome, marca, quant_em_estoque, valor_unitario, data_validade, &#13;&#10;                                   id_categoria, descricao, estoque_minimo, estoque_maximo,&#13;&#10;                                   preco_custo, status, codigo_barras, unidade, peso, &#13;&#10;                                   data_criacao, data_atualizacao)&#13;&#10;                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&#13;&#10;            &quot;&quot;&quot;;&#13;&#10;&#13;&#10;            KeyHolder keyHolder = new GeneratedKeyHolder();&#13;&#10;&#13;&#10;            jdbcTemplate.update(connection -&gt; {&#13;&#10;                PreparedStatement ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);&#13;&#10;                ps.setString(1, produto.getNome());&#13;&#10;                ps.setString(2, produto.getMarca());&#13;&#10;                ps.setInt(3, produto.getQuantEmEstoque());&#13;&#10;                ps.setBigDecimal(4, produto.getValorUnitario());&#13;&#10;                ps.setDate(5, produto.getDataValidade() != null ? java.sql.Date.valueOf(produto.getDataValidade()) : null);&#13;&#10;                ps.setInt(6, produto.getIdCategoria());&#13;&#10;                ps.setString(7, produto.getDescricao());&#13;&#10;                ps.setInt(8, produto.getEstoqueMinimo());&#13;&#10;                &#13;&#10;                // Tratar estoque_maximo null&#13;&#10;                if (produto.getEstoqueMaximo() != null) {&#13;&#10;                    ps.setInt(9, produto.getEstoqueMaximo());&#13;&#10;                } else {&#13;&#10;                    ps.setNull(9, java.sql.Types.INTEGER);&#13;&#10;                }&#13;&#10;                &#13;&#10;                ps.setBigDecimal(10, produto.getPrecoCusto());&#13;&#10;                ps.setString(11, produto.getStatus());&#13;&#10;                ps.setString(12, produto.getCodigoBarras());&#13;&#10;                ps.setString(13, produto.getUnidade());&#13;&#10;                ps.setDouble(14, produto.getPeso());&#13;&#10;                ps.setTimestamp(15, java.sql.Timestamp.valueOf(produto.getDataCriacao()));&#13;&#10;                ps.setTimestamp(16, java.sql.Timestamp.valueOf(produto.getDataAtualizacao()));&#13;&#10;                return ps;&#13;&#10;            }, keyHolder);&#13;&#10;&#13;&#10;            produto.setIdProduto(Objects.requireNonNull(keyHolder.getKey()).intValue());&#13;&#10;        } else {&#13;&#10;            // Atualizar&#13;&#10;            System.out.println(&quot;=== DEBUG REPOSITORY UPDATE ===&quot;);&#13;&#10;            System.out.println(&quot;Produto ID: &quot; + produto.getIdProduto());&#13;&#10;            System.out.println(&quot;valor_unitario no repository: &quot; + produto.getValorUnitario());&#13;&#10;            System.out.println(&quot;quant_em_estoque no repository: &quot; + produto.getQuantEmEstoque());&#13;&#10;            System.out.println(&quot;id_categoria no repository: &quot; + produto.getIdCategoria());&#13;&#10;            System.out.println(&quot;preco_custo no repository: &quot; + produto.getPrecoCusto());&#13;&#10;            System.out.println(&quot;status no repository: &quot; + produto.getStatus());&#13;&#10;&#13;&#10;            produto.setDataAtualizacao(LocalDateTime.now());&#13;&#10;&#13;&#10;            String sql = &quot;&quot;&quot;&#13;&#10;                UPDATE Produto SET nome = ?, marca = ?, quant_em_estoque = ?, valor_unitario = ?, &#13;&#10;                                 data_validade = ?, id_categoria = ?, descricao = ?, &#13;&#10;                                 estoque_minimo = ?, estoque_maximo = ?, preco_custo = ?,&#13;&#10;                                 status = ?, codigo_barras = ?, unidade = ?, peso = ?,&#13;&#10;                                 data_atualizacao = ?&#13;&#10;                WHERE id_produto = ?&#13;&#10;            &quot;&quot;&quot;;&#13;&#10;&#13;&#10;            System.out.println(&quot;SQL a ser executado: &quot; + sql);&#13;&#10;            System.out.println(&quot;Parâmetros do SQL:&quot;);&#13;&#10;            System.out.println(&quot;1. nome: &quot; + produto.getNome());&#13;&#10;            System.out.println(&quot;2. marca: &quot; + produto.getMarca());&#13;&#10;            System.out.println(&quot;3. quant_em_estoque: &quot; + produto.getQuantEmEstoque());&#13;&#10;            System.out.println(&quot;4. valor_unitario: &quot; + produto.getValorUnitario());&#13;&#10;            System.out.println(&quot;5. data_validade: &quot; + produto.getDataValidade());&#13;&#10;            System.out.println(&quot;6. id_categoria: &quot; + produto.getIdCategoria());&#13;&#10;            System.out.println(&quot;7. descricao: &quot; + produto.getDescricao());&#13;&#10;            System.out.println(&quot;8. estoque_minimo: &quot; + produto.getEstoqueMinimo());&#13;&#10;            System.out.println(&quot;9. estoque_maximo: &quot; + produto.getEstoqueMaximo());&#13;&#10;            System.out.println(&quot;10. preco_custo: &quot; + produto.getPrecoCusto());&#13;&#10;            System.out.println(&quot;11. status: &quot; + produto.getStatus());&#13;&#10;            System.out.println(&quot;12. codigo_barras: &quot; + produto.getCodigoBarras());&#13;&#10;            System.out.println(&quot;13. unidade: &quot; + produto.getUnidade());&#13;&#10;            System.out.println(&quot;14. peso: &quot; + produto.getPeso());&#13;&#10;            System.out.println(&quot;15. data_atualizacao: &quot; + produto.getDataAtualizacao());&#13;&#10;            System.out.println(&quot;16. id_produto (WHERE): &quot; + produto.getIdProduto());&#13;&#10;            System.out.println(&quot;================================&quot;);&#13;&#10;&#13;&#10;            jdbcTemplate.update(sql,&#13;&#10;                produto.getNome(), produto.getMarca(), produto.getQuantEmEstoque(),&#13;&#10;                produto.getValorUnitario(), produto.getDataValidade(), produto.getIdCategoria(),&#13;&#10;                produto.getDescricao(), produto.getEstoqueMinimo(), produto.getEstoqueMaximo(),&#13;&#10;                produto.getPrecoCusto(), produto.getStatus(), produto.getCodigoBarras(),&#13;&#10;                produto.getUnidade(), produto.getPeso(), produto.getDataAtualizacao(),&#13;&#10;                produto.getIdProduto()&#13;&#10;            );&#13;&#10;&#13;&#10;            System.out.println(&quot;✅ UPDATE executado com sucesso!&quot;);&#13;&#10;        }&#13;&#10;        return produto;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Transactional&#13;&#10;    public void deleteById(Integer id) {&#13;&#10;        String sql = &quot;DELETE FROM Produto WHERE id_produto = ?&quot;;&#13;&#10;        jdbcTemplate.update(sql, id);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>